cmake_minimum_required(VERSION 3.0)
set(CROSS_COMPILE avr)
set(CMAKE_TOOLCHAIN_FILE cmake/toolchain.cmake)

project(uHID-avr-loader C ASM)
add_compile_options(-Os)

include_directories(include packages/vusb-20121206/)


macro (defconf key)
  file(APPEND ${conf} "#define ${key} ${ARGN}\n")
endmacro()


macro(defstr key)
  string(LENGTH "${ARGN}" len)
  string(REGEX REPLACE "(.)" "'\\1'," tmp "${ARGN}")
  string(REGEX REPLACE ",$" "" tmp2 "${tmp}")
  defconf(${key} ${tmp2})
  defconf(${key}_LEN ${len})
endmacro()

macro(HEXCHAR2DEC VAR VAL)
    if (${VAL} MATCHES "[0-9]")
        SET(${VAR} ${VAL})
    elseif(${VAL} MATCHES "[aA]")
        SET(${VAR} 10)
    elseif(${VAL} MATCHES "[bB]")
        SET(${VAR} 11)
    elseif(${VAL} MATCHES "[cC]")
        SET(${VAR} 12)
    elseif(${VAL} MATCHES "[dD]")
        SET(${VAR} 13)
    elseif(${VAL} MATCHES "[eE]")
        SET(${VAR} 14)
    elseif(${VAL} MATCHES "[fF]")
        SET(${VAR} 15)
    else()
        MESSAGE(FATAL_ERROR "Invalid format for hexidecimal character")
    endif()

endmacro(HEXCHAR2DEC)

macro(HEX2DEC VAR VAL)
    IF (${VAL} EQUAL 0)
        SET(${VAR} 0)
    ELSE()

        SET(CURINDEX 0)
        STRING(LENGTH "${VAL}" CURLENGTH)

        SET(${VAR} 0)

        while (CURINDEX LESS  CURLENGTH)

            STRING(SUBSTRING "${VAL}" ${CURINDEX} 1 CHAR)

            HEXCHAR2DEC(CHAR ${CHAR})

            MATH(EXPR POWAH "(1<<((${CURLENGTH}-${CURINDEX}-1)*4))")
            MATH(EXPR CHAR "(${CHAR}*${POWAH})")
            MATH(EXPR ${VAR} "${${VAR}}+${CHAR}")
            MATH(EXPR CURINDEX "${CURINDEX}+1")
        endwhile()
    ENDIF()
endmacro(HEX2DEC)

macro(defu16 key)
  HEX2DEC(dec ${ARGN})
  math(EXPR lo "${dec} & 255")
  math(EXPR hi "(${dec} >> 8) & 255")
  defconf(${key} ${lo},${hi})
endmacro()

function(generate_config target)
  set(conf ${CMAKE_BINARY_DIR}/include-${target}/usbconfig.cmake.h)
  file(WRITE ${conf} "/* Autogenerated. Do not edit */\n")
  defconf(CONFIG_USB_CFG_DMINUS_BIT ${CONFIG_USB_DMINUS_BIT})
  defconf(CONFIG_USB_CFG_DPLUS_BIT ${CONFIG_USB_DPLUS_BIT})
  defconf(USB_CFG_IOPORTNAME ${CONFIG_USB_IOPORT})


  defu16(USB_CFG_VENDOR_ID ${CONFIG_USB_VID})
  defu16(USB_CFG_DEVICE_ID ${CONFIG_USB_PID})

  defstr(USB_CFG_SERIAL_NUMBER ${CONFIG_USB_SERIAL})
  defstr(USB_CFG_VENDOR_NAME ${CONFIG_USB_VENDOR})
  defstr(USB_CFG_DEVICE_NAME ${CONFIG_USB_PRODUCT})

  defconf(CONFIG_RUN_BUTTON ${CONFIG_RUN_BUTTON})
  if(NOT CONFIG_RUN_BUTTON MATCHES "none")
    defconf(CONFIG_RUN_BUTTON_PORT PORT${CONFIG_RUN_BUTTON_IOPORT})
    defconf(CONFIG_RUN_BUTTON_PIN  PIN${CONFIG_RUN_BUTTON_IOPORT})
    defconf(CONFIG_RUN_BUTTON_BIT  PIN${CONFIG_RUN_BUTTON_BIT})
  endif()

  if(CONFIG_RUN_BUTTON MATCHES "start")
    defconf(CONFIG_RUN_BUTTON_ON_START y)
  elseif(CONFIG_RUN_BUTTON MATCHES "loop")
    defconf(CONFIG_RUN_BUTTON_ON_START y)
  endif()

  if(CONFIG_UHID_VARIANT MATCHES "small")
    defconf(UHID_TINY y)
  endif()
endfunction()

function(add_loader_target name)
  include(${name})
  set(target ${CONFIG_FILENAME})
  generate_config(${target})
  add_executable(${target}
    src/uisp-loader.c
    packages/vusb-20121206/usbdrv/usbdrvasm.S)
  target_include_directories(${target} PRIVATE ${CMAKE_BINARY_DIR}/include-${target})
  target_compile_options(${target} PRIVATE -mmcu=${CONFIG_MCU})
  target_compile_options(${target} PRIVATE -DF_CPU=12000000)
  target_link_libraries(${target} -Wl,--section-start=.text=${CONFIG_LOAD_ADDR})
  target_compile_options(${target} PRIVATE -DUHID_LOAD_ADDRESS=${CONFIG_LOAD_ADDR})
  target_link_libraries(${target} -mmcu=${CONFIG_MCU})

  if (CONFIG_UHID_EEPROM)
    target_compile_options(${target} PRIVATE -DCONFIG_UHID_EEPROM=y)
  endif()

  if (CONFIG_UHID_EEPROM_READBACK)
    target_compile_options(${target} PRIVATE -DCONFIG_UHID_EEPROM_READBACK=y)
  endif()

add_custom_command(
  TARGET ${target}
  COMMAND ${CROSS_OBJCOPY} -j .text -j .data -O ihex ${target} ${target}.hex
  COMMAND ${CROSS_SIZE_TOOL} ${CROSS_SIZE_FLAGS} ${target}
  DEPENDS ${target}
)

add_custom_command(
TARGET ${target}
COMMAND
  ${CROSS_OBJCOPY} -j .eeprom --set-section-flags=.eeprom=alloc,load
  --change-section-lma .eeprom=0 --no-change-warnings
  -O ihex ${target} ${target}.eep
DEPENDS uisp-loader
)
endfunction()

FILE(GLOB DEVS devices/*.cmake)
foreach(dev ${DEVS})
  add_loader_target(${dev})
endforeach()
